{"version":3,"sources":["theme/palette.js","theme/typography.js","theme/overrides/MuiIconButton.js","theme/overrides/MuiTableCell.js","theme/overrides/index.js","theme/overrides/MuiButton.js","theme/overrides/MuiPaper.js","theme/overrides/MuiTableHead.js","theme/overrides/MuiTypography.js","theme/index.js","hooks/useRouter.ts","components/Header/Header.tsx","graphql/generated/graphql.tsx","components/Flag/Flag.tsx","components/LanguagesTable/LanguagesTable.tsx","components/TranslationsTable/TranslationsTable.tsx","views/Languages/Languages.tsx","layouts/Main/components/Footer/Footer.tsx","layouts/Main/Main.tsx","App.tsx","index.tsx"],"names":["white","palette","black","primary","contrastText","main","secondary","dark","colors","red","light","success","green","info","blue","warning","orange","error","text","blueGrey","link","background","default","paper","icon","divider","grey","typography","h1","color","fontWeight","fontSize","letterSpacing","lineHeight","h2","h3","h4","h5","h6","subtitle1","subtitle2","body1","body2","button","caption","overline","textTransform","MuiIconButton","root","&:hover","backgroundColor","overrides","MuiButton","contained","boxShadow","MuiPaper","elevation1","MuiTableCell","_objectSpread","borderBottom","concat","MuiTableHead","MuiTypography","gutterBottom","marginBottom","theme","createMuiTheme","zIndex","appBar","drawer","useRouter","useContext","__RouterContext","useStyles","makeStyles","createStyles","Header","_ref","className","rest","Object","objectWithoutProperties","classes","react_default","a","createElement","assign","clsx","Grid","container","direction","spacing","justify","alignItems","item","Typography","component","variant","Button","LanguagesDocument","gql","_templateObject","TranslationUpdateDocument","_templateObject2","TranslationResetDocument","_templateObject3","TranslationResetAllDocument","_templateObject4","TranslationsDocument","_templateObject5","flagIcon","marginRight","& img","margin","Flag","languageKey","lib","onlyEmojiClassName","en","de","es","chip","nameContainer","display","avatar","progress","width","height","progressContainer","justifyContent","progressLabel","whiteSpace","actionButton","break","flexBasis","LanguagesTable","baseOptions","_useLanguagesQuery","ApolloReactHooks","loading","data","_useState","useState","_useState2","slicedToArray","tableData","setTableData","useEffect","languages","_useTranslationResetA","useTranslationResetAllMutation","translationResetAllMutation","locales","dist_default","title","columns","field","render","rowData","components_Flag_Flag","key","name","sorting","Chip","size","isActive","label","isDefault","clickable","deleteIcon","Done_default","onDelete","hidden","headerStyle","textAlign","align","CircularProgress","value","RouterLink","to","isLoading","editable","onRowDelete","oldData","Promise","resolve","update","proxy","mutationResult","updateData","toConsumableArray","indexOf","variables","actions","tooltip","isFreeAction","onClick","event","alert","components","Toolbar","props","dist","Divider","icons","Add","forwardRef","ref","esm_Add","Delete","Undo","localization","header","body","addTooltip","deleteTooltip","editTooltip","editRow","deleteText","emptyDataSourceMessage","options","search","showTitle","actionsColumnIndex","pageSize","pageSizeOptions","& .MuiTableSortLabel-icon","formControl","minWidth","selectEmpty","& .selectLanguage","position","marginTop","& .MuiSelect-selectMenu","selectFlag","editField","TranslationsTable","router","id","match","params","setLanguageKey","_useState3","_useState4","_useState5","_useState6","tableLoading","setTableLoading","_useTranslationsQuery","translations","_useTranslationUpdate","useTranslationUpdateMutation","translationUpdateMutation","_useTranslationResetM","useTranslationResetMutation","translationResetMutation","handleSelectChange","React","useCallback","history","push","target","FormControl","Select","onChange","displayEmpty","MenuItem","onRowAdd","newData","translationUpdate","translation","onRowUpdate","EditField","length","searchFieldStyle","addRowPosition","padding","tabs","content","Languages","tab","components_Header_Header","Tabs","scrollButtons","map","Tab","components_LanguagesTable_LanguagesTable","components_TranslationsTable_TranslationsTable","Footer","Link","href","Icon","defineProperty","paddingTop","breakpoints","up","fab","bottom","right","menuItem","openInNewIcon","marginLeft","Main","fabRef","useRef","setOpen","react_router_dom","basename","Fab","aria-label","Add_default","react_router","exact","from","path","components_Footer_Footer","App","ThemeProvider","layouts_Main_Main","httpLink","createHttpLink","uri","process","headers","Authorization","window","token","client","ApolloClient","cache","InMemoryCache","ReactDOM","react_common_esm","ApolloContext","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.c2ae5cbd.chunk.js","sourcesContent":["import { colors } from '@material-ui/core';\n\nconst white = '#FFFFFF';\nconst black = '#000000';\n\nexport default {\n  black,\n  white,\n  primary: {\n    contrastText: white,\n    main: '#c02124',\n  },\n  secondary: {\n    contrastText: white,\n    dark: colors.red[900],\n    main: colors.red[600],\n    light: colors.red[100]\n  },\n  success: {\n    contrastText: white,\n    dark: colors.green[900],\n    main: colors.green[600],\n    light: colors.green[400]\n  },\n  info: {\n    contrastText: white,\n    dark: colors.blue[900],\n    main: colors.blue[600],\n    light: colors.blue[400]\n  },\n  warning: {\n    contrastText: white,\n    dark: colors.orange[900],\n    main: colors.orange[600],\n    light: colors.orange[400]\n  },\n  error: {\n    contrastText: white,\n    dark: colors.red[900],\n    main: colors.red[600],\n    light: colors.red[400]\n  },\n  text: {\n    primary: colors.blueGrey[900],\n    secondary: colors.blueGrey[600],\n    link: colors.blue[600]\n  },\n  background: {\n    default: '#F4F6F8',\n    paper: white\n  },\n  icon: colors.blueGrey[600],\n  divider: colors.grey[200]\n};\n","import palette from './palette';\n\nexport default {\n  h1: {\n    color: palette.text.primary,\n    fontWeight: 500,\n    fontSize: '35px',\n    letterSpacing: '-0.24px',\n    lineHeight: '40px'\n  },\n  h2: {\n    color: palette.text.primary,\n    fontWeight: 500,\n    fontSize: '29px',\n    letterSpacing: '-0.24px',\n    lineHeight: '32px'\n  },\n  h3: {\n    color: palette.text.primary,\n    fontWeight: 500,\n    fontSize: '24px',\n    letterSpacing: '-0.06px',\n    lineHeight: '28px'\n  },\n  h4: {\n    color: palette.text.primary,\n    fontWeight: 500,\n    fontSize: '20px',\n    letterSpacing: '-0.06px',\n    lineHeight: '24px'\n  },\n  h5: {\n    color: palette.text.primary,\n    fontWeight: 500,\n    fontSize: '16px',\n    letterSpacing: '-0.05px',\n    lineHeight: '20px'\n  },\n  h6: {\n    color: palette.text.primary,\n    fontWeight: 500,\n    fontSize: '14px',\n    letterSpacing: '-0.05px',\n    lineHeight: '20px'\n  },\n  subtitle1: {\n    color: palette.text.primary,\n    fontSize: '16px',\n    letterSpacing: '-0.05px',\n    lineHeight: '25px'\n  },\n  subtitle2: {\n    color: palette.text.secondary,\n    fontWeight: 400,\n    fontSize: '14px',\n    letterSpacing: '-0.05px',\n    lineHeight: '21px'\n  },\n  body1: {\n    color: palette.text.primary,\n    fontSize: '14px',\n    letterSpacing: '-0.05px',\n    lineHeight: '21px'\n  },\n  body2: {\n    color: palette.text.secondary,\n    fontSize: '12px',\n    letterSpacing: '-0.04px',\n    lineHeight: '18px'\n  },\n  button: {\n    color: palette.text.primary,\n    fontSize: '14px'\n  },\n  caption: {\n    color: palette.text.secondary,\n    fontSize: '11px',\n    letterSpacing: '0.33px',\n    lineHeight: '13px'\n  },\n  overline: {\n    color: palette.text.secondary,\n    fontSize: '11px',\n    fontWeight: 500,\n    letterSpacing: '0.33px',\n    lineHeight: '13px',\n    textTransform: 'uppercase'\n  }\n};\n","import palette from '../palette';\n\nexport default {\n  root: {\n    color: palette.icon,\n    '&:hover': {\n      backgroundColor: 'rgba(0, 0, 0, 0.03)'\n    }\n  }\n};\n","import palette from '../palette';\nimport typography from '../typography';\n\nexport default {\n  root: {\n    ...typography.body1,\n    borderBottom: `1px solid ${palette.divider}`\n  }\n};\n","import MuiButton from './MuiButton';\nimport MuiIconButton from './MuiIconButton';\nimport MuiPaper from './MuiPaper';\nimport MuiTableCell from './MuiTableCell';\nimport MuiTableHead from './MuiTableHead';\nimport MuiTypography from './MuiTypography';\n\nexport default {\n  MuiButton,\n  MuiIconButton,\n  MuiPaper,\n  MuiTableCell,\n  MuiTableHead,\n  MuiTypography\n};\n","export default {\n  contained: {\n    boxShadow:\n      '0 1px 1px 0 rgba(0,0,0,0.14), 0 2px 1px -1px rgba(0,0,0,0.12), 0 1px 3px 0 rgba(0,0,0,0.20)',\n    backgroundColor: '#FFFFFF'\n  }\n};\n","export default {\n  elevation1: {\n    boxShadow: '0 0 0 1px rgba(63,63,68,0.05), 0 1px 3px 0 rgba(63,63,68,0.15)'\n  }\n};\n","import { colors } from '@material-ui/core';\n\nexport default {\n  root: {\n    backgroundColor: colors.grey[50]\n  }\n};\n","export default {\n  gutterBottom: {\n    marginBottom: 8\n  }\n};\n","import { createMuiTheme } from '@material-ui/core';\n\nimport palette from './palette';\nimport typography from './typography';\nimport overrides from './overrides';\n\nconst theme = createMuiTheme({\n  palette,\n  typography,\n  overrides,\n  zIndex: {\n    appBar: 1200,\n    drawer: 1100\n  }\n});\n\nexport default theme;\n","import { useContext } from 'react';\nimport { __RouterContext, RouteComponentProps } from 'react-router';\n\nexport default function useRouter<TParams = {}>() {\n  return useContext(__RouterContext) as RouteComponentProps<TParams>;\n}","import React from 'react';\nimport clsx from 'clsx';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport { Button, Grid, Typography } from '@material-ui/core';\n\ninterface Props {\n  className?: string;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {}\n  }));\n\nconst Header: React.FC<Props> = ({ className, ...rest }: Props) => {\n  const classes = useStyles();\n\n  return (\n    <div\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <Grid\n        container\n        direction=\"row\"\n        spacing={3}\n        justify=\"space-between\"\n        alignItems=\"flex-end\"\n      >\n        <Grid\n          item\n        >\n          <Typography\n            component=\"h2\"\n            gutterBottom\n            variant=\"overline\"\n          >\n            Master Settings\n          </Typography>\n          <Typography\n            component=\"h1\"\n            variant=\"h3\"\n          >\n            Languages\n          </Typography>\n        </Grid>\n        <Grid\n          item\n        >\n          <Button\n            color=\"primary\"\n            variant=\"contained\"\n          >\n            Add language\n            </Button>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default Header;\n","import gql from 'graphql-tag';\nimport * as React from 'react';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactComponents from '@apollo/react-components';\nimport * as ApolloReactHoc from '@apollo/react-hoc';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string,\n  String: string,\n  Boolean: boolean,\n  Int: number,\n  Float: number,\n};\n\nexport type Language = {\n   __typename?: 'Language',\n  id?: Maybe<Scalars['ID']>,\n  name: Scalars['String'],\n  key: Scalars['String'],\n  isActive: Scalars['Boolean'],\n  isDefault: Scalars['Boolean'],\n};\n\nexport type Mutation = {\n   __typename?: 'Mutation',\n  translationUpdate: Translation,\n  translationReset: Scalars['Boolean'],\n  translationResetAll: Scalars['Boolean'],\n};\n\n\nexport type MutationTranslationUpdateArgs = {\n  languageKey: Scalars['ID'],\n  translation: TranslationInput\n};\n\n\nexport type MutationTranslationResetArgs = {\n  languageKey: Scalars['ID'],\n  key: Scalars['ID']\n};\n\n\nexport type MutationTranslationResetAllArgs = {\n  languageKey: Scalars['ID']\n};\n\nexport type Query = {\n   __typename?: 'Query',\n  /** retrieve a JWT for authentication of further requests */\n  token: Scalars['String'],\n  translations: Array<Translation>,\n  translation?: Maybe<Translation>,\n  /** Retrun a language object by ID */\n  language?: Maybe<Language>,\n  /** Returns all the languages available in the shop */\n  languages: Array<Language>,\n};\n\n\nexport type QueryTokenArgs = {\n  username: Scalars['String'],\n  password: Scalars['String']\n};\n\n\nexport type QueryTranslationsArgs = {\n  languageKey: Scalars['ID']\n};\n\n\nexport type QueryTranslationArgs = {\n  languageKey: Scalars['ID'],\n  key: Scalars['ID']\n};\n\n\nexport type QueryLanguageArgs = {\n  id: Scalars['ID']\n};\n\nexport type Translation = {\n   __typename?: 'Translation',\n  key?: Maybe<Scalars['ID']>,\n  value?: Maybe<Scalars['String']>,\n};\n\nexport type TranslationInput = {\n  key: Scalars['ID'],\n  value: Scalars['String'],\n};\n\nexport type LanguagesQueryVariables = {};\n\n\nexport type LanguagesQuery = (\n  { __typename?: 'Query' }\n  & { languages: Array<(\n    { __typename?: 'Language' }\n    & Pick<Language, 'id' | 'name' | 'key' | 'isActive' | 'isDefault'>\n  )> }\n);\n\nexport type TranslationUpdateMutationVariables = {\n  languageKey: Scalars['ID'],\n  translation: TranslationInput\n};\n\n\nexport type TranslationUpdateMutation = (\n  { __typename?: 'Mutation' }\n  & { translationUpdate: (\n    { __typename?: 'Translation' }\n    & Pick<Translation, 'key' | 'value'>\n  ) }\n);\n\nexport type TranslationResetMutationVariables = {\n  languageKey: Scalars['ID'],\n  key: Scalars['ID']\n};\n\n\nexport type TranslationResetMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'translationReset'>\n);\n\nexport type TranslationResetAllMutationVariables = {\n  languageKey: Scalars['ID']\n};\n\n\nexport type TranslationResetAllMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'translationResetAll'>\n);\n\nexport type TranslationsQueryVariables = {\n  languageKey: Scalars['ID']\n};\n\n\nexport type TranslationsQuery = (\n  { __typename?: 'Query' }\n  & { translations: Array<(\n    { __typename?: 'Translation' }\n    & Pick<Translation, 'key' | 'value'>\n  )> }\n);\n\n\nexport const LanguagesDocument = gql`\n    query Languages {\n  languages {\n    id\n    name\n    key\n    isActive\n    isDefault\n  }\n}\n    `;\nexport type LanguagesComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<LanguagesQuery, LanguagesQueryVariables>, 'query'>;\n\n    export const LanguagesComponent = (props: LanguagesComponentProps) => (\n      <ApolloReactComponents.Query<LanguagesQuery, LanguagesQueryVariables> query={LanguagesDocument} {...props} />\n    );\n    \nexport type LanguagesProps<TChildProps = {}> = ApolloReactHoc.DataProps<LanguagesQuery, LanguagesQueryVariables> & TChildProps;\nexport function withLanguages<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  LanguagesQuery,\n  LanguagesQueryVariables,\n  LanguagesProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, LanguagesQuery, LanguagesQueryVariables, LanguagesProps<TChildProps>>(LanguagesDocument, {\n      alias: 'languages',\n      ...operationOptions\n    });\n};\n\n/**\n * __useLanguagesQuery__\n *\n * To run a query within a React component, call `useLanguagesQuery` and pass it any options that fit your needs.\n * When your component renders, `useLanguagesQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useLanguagesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useLanguagesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<LanguagesQuery, LanguagesQueryVariables>) {\n        return ApolloReactHooks.useQuery<LanguagesQuery, LanguagesQueryVariables>(LanguagesDocument, baseOptions);\n      }\nexport function useLanguagesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<LanguagesQuery, LanguagesQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<LanguagesQuery, LanguagesQueryVariables>(LanguagesDocument, baseOptions);\n        }\nexport type LanguagesQueryHookResult = ReturnType<typeof useLanguagesQuery>;\nexport type LanguagesLazyQueryHookResult = ReturnType<typeof useLanguagesLazyQuery>;\nexport type LanguagesQueryResult = ApolloReactCommon.QueryResult<LanguagesQuery, LanguagesQueryVariables>;\nexport const TranslationUpdateDocument = gql`\n    mutation TranslationUpdate($languageKey: ID!, $translation: TranslationInput!) {\n  translationUpdate(languageKey: $languageKey, translation: $translation) {\n    key\n    value\n  }\n}\n    `;\nexport type TranslationUpdateMutationFn = ApolloReactCommon.MutationFunction<TranslationUpdateMutation, TranslationUpdateMutationVariables>;\nexport type TranslationUpdateComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<TranslationUpdateMutation, TranslationUpdateMutationVariables>, 'mutation'>;\n\n    export const TranslationUpdateComponent = (props: TranslationUpdateComponentProps) => (\n      <ApolloReactComponents.Mutation<TranslationUpdateMutation, TranslationUpdateMutationVariables> mutation={TranslationUpdateDocument} {...props} />\n    );\n    \nexport type TranslationUpdateProps<TChildProps = {}> = ApolloReactHoc.MutateProps<TranslationUpdateMutation, TranslationUpdateMutationVariables> & TChildProps;\nexport function withTranslationUpdate<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  TranslationUpdateMutation,\n  TranslationUpdateMutationVariables,\n  TranslationUpdateProps<TChildProps>>) {\n    return ApolloReactHoc.withMutation<TProps, TranslationUpdateMutation, TranslationUpdateMutationVariables, TranslationUpdateProps<TChildProps>>(TranslationUpdateDocument, {\n      alias: 'translationUpdate',\n      ...operationOptions\n    });\n};\n\n/**\n * __useTranslationUpdateMutation__\n *\n * To run a mutation, you first call `useTranslationUpdateMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useTranslationUpdateMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [translationUpdateMutation, { data, loading, error }] = useTranslationUpdateMutation({\n *   variables: {\n *      languageKey: // value for 'languageKey'\n *      translation: // value for 'translation'\n *   },\n * });\n */\nexport function useTranslationUpdateMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<TranslationUpdateMutation, TranslationUpdateMutationVariables>) {\n        return ApolloReactHooks.useMutation<TranslationUpdateMutation, TranslationUpdateMutationVariables>(TranslationUpdateDocument, baseOptions);\n      }\nexport type TranslationUpdateMutationHookResult = ReturnType<typeof useTranslationUpdateMutation>;\nexport type TranslationUpdateMutationResult = ApolloReactCommon.MutationResult<TranslationUpdateMutation>;\nexport type TranslationUpdateMutationOptions = ApolloReactCommon.BaseMutationOptions<TranslationUpdateMutation, TranslationUpdateMutationVariables>;\nexport const TranslationResetDocument = gql`\n    mutation TranslationReset($languageKey: ID!, $key: ID!) {\n  translationReset(languageKey: $languageKey, key: $key)\n}\n    `;\nexport type TranslationResetMutationFn = ApolloReactCommon.MutationFunction<TranslationResetMutation, TranslationResetMutationVariables>;\nexport type TranslationResetComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<TranslationResetMutation, TranslationResetMutationVariables>, 'mutation'>;\n\n    export const TranslationResetComponent = (props: TranslationResetComponentProps) => (\n      <ApolloReactComponents.Mutation<TranslationResetMutation, TranslationResetMutationVariables> mutation={TranslationResetDocument} {...props} />\n    );\n    \nexport type TranslationResetProps<TChildProps = {}> = ApolloReactHoc.MutateProps<TranslationResetMutation, TranslationResetMutationVariables> & TChildProps;\nexport function withTranslationReset<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  TranslationResetMutation,\n  TranslationResetMutationVariables,\n  TranslationResetProps<TChildProps>>) {\n    return ApolloReactHoc.withMutation<TProps, TranslationResetMutation, TranslationResetMutationVariables, TranslationResetProps<TChildProps>>(TranslationResetDocument, {\n      alias: 'translationReset',\n      ...operationOptions\n    });\n};\n\n/**\n * __useTranslationResetMutation__\n *\n * To run a mutation, you first call `useTranslationResetMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useTranslationResetMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [translationResetMutation, { data, loading, error }] = useTranslationResetMutation({\n *   variables: {\n *      languageKey: // value for 'languageKey'\n *      key: // value for 'key'\n *   },\n * });\n */\nexport function useTranslationResetMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<TranslationResetMutation, TranslationResetMutationVariables>) {\n        return ApolloReactHooks.useMutation<TranslationResetMutation, TranslationResetMutationVariables>(TranslationResetDocument, baseOptions);\n      }\nexport type TranslationResetMutationHookResult = ReturnType<typeof useTranslationResetMutation>;\nexport type TranslationResetMutationResult = ApolloReactCommon.MutationResult<TranslationResetMutation>;\nexport type TranslationResetMutationOptions = ApolloReactCommon.BaseMutationOptions<TranslationResetMutation, TranslationResetMutationVariables>;\nexport const TranslationResetAllDocument = gql`\n    mutation TranslationResetAll($languageKey: ID!) {\n  translationResetAll(languageKey: $languageKey)\n}\n    `;\nexport type TranslationResetAllMutationFn = ApolloReactCommon.MutationFunction<TranslationResetAllMutation, TranslationResetAllMutationVariables>;\nexport type TranslationResetAllComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<TranslationResetAllMutation, TranslationResetAllMutationVariables>, 'mutation'>;\n\n    export const TranslationResetAllComponent = (props: TranslationResetAllComponentProps) => (\n      <ApolloReactComponents.Mutation<TranslationResetAllMutation, TranslationResetAllMutationVariables> mutation={TranslationResetAllDocument} {...props} />\n    );\n    \nexport type TranslationResetAllProps<TChildProps = {}> = ApolloReactHoc.MutateProps<TranslationResetAllMutation, TranslationResetAllMutationVariables> & TChildProps;\nexport function withTranslationResetAll<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  TranslationResetAllMutation,\n  TranslationResetAllMutationVariables,\n  TranslationResetAllProps<TChildProps>>) {\n    return ApolloReactHoc.withMutation<TProps, TranslationResetAllMutation, TranslationResetAllMutationVariables, TranslationResetAllProps<TChildProps>>(TranslationResetAllDocument, {\n      alias: 'translationResetAll',\n      ...operationOptions\n    });\n};\n\n/**\n * __useTranslationResetAllMutation__\n *\n * To run a mutation, you first call `useTranslationResetAllMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useTranslationResetAllMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [translationResetAllMutation, { data, loading, error }] = useTranslationResetAllMutation({\n *   variables: {\n *      languageKey: // value for 'languageKey'\n *   },\n * });\n */\nexport function useTranslationResetAllMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<TranslationResetAllMutation, TranslationResetAllMutationVariables>) {\n        return ApolloReactHooks.useMutation<TranslationResetAllMutation, TranslationResetAllMutationVariables>(TranslationResetAllDocument, baseOptions);\n      }\nexport type TranslationResetAllMutationHookResult = ReturnType<typeof useTranslationResetAllMutation>;\nexport type TranslationResetAllMutationResult = ApolloReactCommon.MutationResult<TranslationResetAllMutation>;\nexport type TranslationResetAllMutationOptions = ApolloReactCommon.BaseMutationOptions<TranslationResetAllMutation, TranslationResetAllMutationVariables>;\nexport const TranslationsDocument = gql`\n    query Translations($languageKey: ID!) {\n  translations(languageKey: $languageKey) {\n    key\n    value\n  }\n}\n    `;\nexport type TranslationsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<TranslationsQuery, TranslationsQueryVariables>, 'query'> & ({ variables: TranslationsQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const TranslationsComponent = (props: TranslationsComponentProps) => (\n      <ApolloReactComponents.Query<TranslationsQuery, TranslationsQueryVariables> query={TranslationsDocument} {...props} />\n    );\n    \nexport type TranslationsProps<TChildProps = {}> = ApolloReactHoc.DataProps<TranslationsQuery, TranslationsQueryVariables> & TChildProps;\nexport function withTranslations<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  TranslationsQuery,\n  TranslationsQueryVariables,\n  TranslationsProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, TranslationsQuery, TranslationsQueryVariables, TranslationsProps<TChildProps>>(TranslationsDocument, {\n      alias: 'translations',\n      ...operationOptions\n    });\n};\n\n/**\n * __useTranslationsQuery__\n *\n * To run a query within a React component, call `useTranslationsQuery` and pass it any options that fit your needs.\n * When your component renders, `useTranslationsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTranslationsQuery({\n *   variables: {\n *      languageKey: // value for 'languageKey'\n *   },\n * });\n */\nexport function useTranslationsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<TranslationsQuery, TranslationsQueryVariables>) {\n        return ApolloReactHooks.useQuery<TranslationsQuery, TranslationsQueryVariables>(TranslationsDocument, baseOptions);\n      }\nexport function useTranslationsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<TranslationsQuery, TranslationsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<TranslationsQuery, TranslationsQueryVariables>(TranslationsDocument, baseOptions);\n        }\nexport type TranslationsQueryHookResult = ReturnType<typeof useTranslationsQuery>;\nexport type TranslationsLazyQueryHookResult = ReturnType<typeof useTranslationsLazyQuery>;\nexport type TranslationsQueryResult = ApolloReactCommon.QueryResult<TranslationsQuery, TranslationsQueryVariables>;","import React from \"react\";\nimport clsx from \"clsx\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport { Emojione } from \"react-emoji-render\";\n\ninterface Props {\n  languageKey: string;\n  className?: string;\n}\n\ninterface Flag {\n  en: string;\n  de: string;\n  es: string;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {},\n    flagIcon: {\n      fontSize: \"42px\",\n      marginRight: theme.spacing(2),\n      \"& img\": {\n        margin: \"0px !important\"\n      }\n    }\n  })\n);\n\nconst Flag: React.FC<Props> = ({ languageKey, className, ...rest }: Props) => {\n  const classes = useStyles();\n  const flags: any = {\n    en: \"flag-gb\",\n    de: \"flag-de\",\n    es: \"flag-mx\"\n  };\n  return (\n    <Emojione\n      onlyEmojiClassName={clsx(className, classes.flagIcon)}\n      text={`:${flags[languageKey]}:`}\n      {...rest}\n    />\n  );\n};\n\nexport default Flag;\n","import {\n  Button,\n  Chip,\n  CircularProgress,\n  colors,\n  Divider,\n  Typography,\n  Grid\n} from \"@material-ui/core\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport DoneIcon from \"@material-ui/icons/Done\";\nimport MaterialTable, { MTableToolbar } from \"material-table\";\nimport React, { forwardRef, useEffect, useState } from \"react\";\nimport { Add, Undo } from \"@material-ui/icons\";\n\nimport { Link as RouterLink } from \"react-router-dom\";\nimport {\n  LanguagesQuery,\n  useLanguagesQuery,\n  useTranslationResetAllMutation\n} from \"../../graphql/generated/graphql\";\nimport Flag from \"../Flag\";\n\ninterface Props {\n  className?: string;\n}\n\nexport interface State {\n  data: LanguagesQuery[];\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {},\n    chip: {\n      margin: theme.spacing(0.25)\n    },\n    nameContainer: {\n      display: \"flex\",\n      alignItems: \"center\"\n    },\n    avatar: {\n      marginRight: theme.spacing(2)\n    },\n    progress: {\n      width: \"56px\",\n      height: \"56px\"\n    },\n    progressContainer: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"flex-end\",\n      marginBottom: theme.spacing(1)\n    },\n    progressLabel: {\n      whiteSpace: \"nowrap\",\n      marginRight: theme.spacing(1)\n    },\n    actionButton: {\n      display: \"block\"\n    },\n    break: {\n      flexBasis: \"100%\",\n      height: \"0\"\n    }\n  })\n);\n\nconst LanguagesTable: React.FC<Props> = ({ className }) => {\n  const classes = useStyles();\n  const { loading, error, data } = useLanguagesQuery();\n  const [tableData, setTableData] = useState();\n\n  useEffect(() => {\n    if (!loading && data) {\n      setTableData(data.languages);\n    }\n    if (error) {\n      setTableData([]);\n    }\n  }, [data, error, loading]);\n\n  const [translationResetAllMutation] = useTranslationResetAllMutation();\n\n  const locales: any = {\n    en: \"EN\",\n    de: \"DE\",\n    es: \"MX\"\n  };\n\n  return (\n    <div className={classes.root}>\n      <MaterialTable\n        title={\n          <Typography variant=\"h5\" component=\"span\">\n            All Languages\n          </Typography>\n        }\n        columns={[\n          {\n            title: \"Name\",\n            field: \"name\",\n            render: rowData => (\n              <div className={classes.nameContainer}>\n                <Flag languageKey={rowData.key} />\n                <Typography variant=\"body1\">{rowData.name}</Typography>\n              </div>\n            )\n          },\n          {\n            title: \"Locale\",\n            field: \"key\",\n            render: rowData => `${rowData.key}-${locales[rowData.key]}`\n          },\n          {\n            title: \"Status\",\n            field: \"isActive\",\n            sorting: false,\n            render: rowData => (\n              <div>\n                <Chip\n                  size=\"small\"\n                  color={rowData.isActive ? \"secondary\" : \"default\"}\n                  variant=\"outlined\"\n                  label=\"Active\"\n                  className={classes.chip}\n                />\n                {rowData.isDefault && (\n                  <Chip\n                    size=\"small\"\n                    color={rowData.isDefault ? \"secondary\" : \"default\"}\n                    variant=\"default\"\n                    clickable={false}\n                    label=\"Default\"\n                    className={classes.chip}\n                    deleteIcon={<DoneIcon />}\n                    onDelete={() => null}\n                  />\n                )}\n              </div>\n            )\n          },\n          {\n            field: \"isDefault\",\n            hidden: true\n          },\n          {\n            title: \"Translations\",\n            headerStyle: {\n              textAlign: \"right\"\n            },\n            sorting: false,\n            render: rowData => (\n              <Grid container className={classes.progressContainer} spacing={2}>\n                <Grid item className={classes.progressLabel}>\n                  <Typography variant=\"h6\" align=\"right\">\n                    {rowData.key === \"es\" ? \"92%\" : \"100%\"}\n                  </Typography>\n                  <Typography variant=\"body1\" align=\"right\">\n                    Translation Rate\n                  </Typography>\n                </Grid>\n                <CircularProgress\n                  className={classes.progress}\n                  variant=\"static\"\n                  color=\"secondary\"\n                  value={rowData.key === \"es\" ? 92 : 100}\n                />\n                <Grid item>\n                  <Button\n                    color=\"primary\"\n                    component={RouterLink}\n                    size=\"small\"\n                    to={`/translations/${rowData.key}`}\n                    variant=\"outlined\"\n                  >\n                    Edit Translations\n                  </Button>\n                </Grid>\n              </Grid>\n            )\n          }\n        ]}\n        isLoading={loading}\n        data={tableData}\n        editable={{\n          onRowDelete: oldData =>\n            new Promise(resolve => {\n              translationResetAllMutation({\n                update: (proxy, mutationResult) => {\n                  const updateData = [...tableData];\n                  const { data } = mutationResult;\n                  if (data && data) {\n                    updateData[tableData.indexOf(oldData)] = oldData;\n                    setTableData(updateData);\n                    resolve();\n                  }\n                },\n                variables: {\n                  languageKey: oldData.key\n                }\n              });\n            })\n        }}\n        actions={[\n          {\n            icon: \"more_vert\",\n            tooltip: \"More actions\",\n            isFreeAction: true,\n            onClick: event => alert(\"More...\")\n          }\n        ]}\n        components={{\n          Toolbar: props => (\n            <div>\n              <MTableToolbar {...props} />\n              <Divider />\n            </div>\n          )\n        }}\n        icons={{\n          Add: forwardRef((props, ref) => <Add {...props} ref={ref} />),\n          Delete: forwardRef((props, ref) => <Undo {...props} ref={ref} />)\n        }}\n        localization={{\n          header: {\n            actions: \"Reset\"\n          },\n          body: {\n            addTooltip: \"Add\",\n            deleteTooltip: \"Reset\",\n            editTooltip: \"Edit\",\n            editRow: {\n              deleteText:\n                \"Are you sure you want to reset the default translations?\"\n            },\n            emptyDataSourceMessage: \"No translations to display\"\n          }\n        }}\n        options={{\n          search: false,\n          showTitle: true,\n          actionsColumnIndex: -1,\n          pageSize: 5,\n          pageSizeOptions: [5, 10, 30],\n          headerStyle: {\n            backgroundColor: colors.grey[50]\n          }\n        }}\n      />\n    </div>\n  );\n};\n\nexport default LanguagesTable;\n","import {\n  colors,\n  Divider,\n  FormControl,\n  MenuItem,\n  Select,\n  Typography\n} from \"@material-ui/core\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport { Add, Undo } from \"@material-ui/icons\";\nimport MaterialTable, { MTableEditField, MTableToolbar } from \"material-table\";\nimport React, { forwardRef, useEffect, useState } from \"react\";\nimport {\n  useTranslationResetMutation,\n  useTranslationsQuery,\n  useTranslationUpdateMutation\n} from \"../../graphql/generated/graphql\";\nimport { useRouter } from \"../../hooks\";\nimport Flag from \"../Flag\";\n\ninterface Props {\n  className?: string;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      \"& .MuiTableSortLabel-icon\": {\n        fontSize: \"1rem\",\n        width: \"1em\",\n        height: \"1em\"\n      }\n    },\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 140,\n      alignItems: \"center\"\n    },\n    selectEmpty: {\n      width: \"280px\",\n      \"& .selectLanguage\": {\n        position: \"absolute\",\n        marginTop: \"1em\"\n      },\n      \"& .MuiSelect-selectMenu\": {\n        height: \"3em\"\n      }\n    },\n    selectFlag: {\n      lineHeight: \"1.3 !important\"\n    },\n    editField: {\n      width: \"100%\"\n    }\n  })\n);\n\nconst TranslationsTable: React.FC<Props> = ({ className, ...rest }) => {\n  const classes = useStyles();\n  const router = useRouter<{ id: string }>();\n  const {\n    match: {\n      params: { id }\n    }\n  } = router;\n\n  const [languageKey, setLanguageKey] = useState(id ? id : \"\");\n  const [tableData, setTableData] = useState();\n  const [tableLoading, setTableLoading] = useState();\n\n  const { loading, error, data } = useTranslationsQuery({\n    variables: { languageKey }\n  });\n\n  useEffect(() => {\n    if (loading) {\n      setTableLoading(loading);\n    }\n    if (data) {\n      setTableLoading(loading);\n      setTableData(data.translations);\n    }\n    if (error) {\n      setTableData([]);\n    }\n  }, [data, error, loading]);\n\n  const [translationUpdateMutation] = useTranslationUpdateMutation();\n  const [translationResetMutation] = useTranslationResetMutation();\n\n  const handleSelectChange = React.useCallback(\n    (event: React.ChangeEvent<{ name?: string; value: unknown }>) => {\n      router.history.push(`/translations/${event.target.value}`);\n      setLanguageKey(event.target.value as string);\n    },\n    [router.history]\n  );\n\n  return (\n    <div className={classes.root}>\n      <MaterialTable\n        title={\n          <FormControl className={classes.formControl}>\n            <Select\n              value={languageKey}\n              onChange={handleSelectChange}\n              displayEmpty\n              name=\"language\"\n              className={classes.selectEmpty}\n            >\n              <MenuItem value={\"\"}>\n                <Typography variant={\"subtitle1\"} className=\"selectLanguage\">\n                  Select a language\n                </Typography>\n              </MenuItem>\n              <MenuItem value={\"de\"}>\n                <Flag languageKey={\"de\"} className={classes.selectFlag} />\n                <span className=\"selectLanguage\">Deutsch</span>\n              </MenuItem>\n              <MenuItem value={\"en\"}>\n                <Flag languageKey={\"en\"} className={classes.selectFlag} />\n                <span className=\"selectLanguage\">English</span>\n              </MenuItem>\n              <MenuItem value={\"es\"}>\n                <Flag languageKey={\"es\"} className={classes.selectFlag} />\n                <span className=\"selectLanguage\">Español</span>\n              </MenuItem>\n            </Select>\n          </FormControl>\n        }\n        columns={[\n          {\n            title: \"Field\",\n            field: \"key\",\n            editable: \"onAdd\"\n          },\n          {\n            title: \"Translation\",\n            field: \"value\"\n          }\n        ]}\n        isLoading={tableLoading}\n        data={tableData}\n        editable={{\n          onRowAdd: newData =>\n            new Promise(resolve => {\n              translationUpdateMutation({\n                update: (proxy, mutationResult) => {\n                  const updateData = [...tableData];\n                  const { data } = mutationResult;\n                  if (data && data.translationUpdate) {\n                    updateData[tableData.indexOf(newData)] =\n                      data.translationUpdate;\n                    resolve();\n                  }\n                },\n                variables: {\n                  languageKey: languageKey,\n                  translation: { key: newData.key, value: newData.value }\n                }\n              });\n            }),\n          onRowDelete: oldData =>\n            new Promise(resolve => {\n              translationResetMutation({\n                update: (proxy, mutationResult) => {\n                  const updateData = [...tableData];\n                  const { data } = mutationResult;\n                  if (data) {\n                    updateData[tableData.indexOf(oldData)] = oldData;\n                    setTableData(updateData);\n                    resolve();\n                  }\n                },\n                variables: {\n                  languageKey: languageKey,\n                  key: oldData.key\n                }\n              });\n            }),\n          onRowUpdate: (newData, oldData) =>\n            new Promise(resolve => {\n              translationUpdateMutation({\n                update: (proxy, mutationResult) => {\n                  const updateData = [...tableData];\n                  const { data } = mutationResult;\n                  if (data && data.translationUpdate) {\n                    updateData[tableData.indexOf(oldData)] =\n                      data.translationUpdate;\n                    setTableData(updateData);\n                    resolve();\n                  }\n                },\n                variables: {\n                  languageKey: languageKey,\n                  translation: { key: newData.key, value: newData.value }\n                }\n              });\n            })\n        }}\n        components={{\n          Toolbar: props => (\n            <div>\n              <MTableToolbar {...props} />\n              <Divider />\n            </div>\n          ),\n          EditField: props => (\n            <MTableEditField className={classes.editField} {...props} />\n          )\n        }}\n        icons={{\n          Add: forwardRef((props, ref) => <Add {...props} ref={ref} />),\n          Delete: forwardRef((props, ref) => <Undo {...props} ref={ref} />)\n        }}\n        localization={{\n          body: {\n            addTooltip: \"Add\",\n            deleteTooltip: \"Reset\",\n            editTooltip: \"Edit\",\n            editRow: {\n              deleteText: \"Are you sure reset this translation?\"\n            },\n            emptyDataSourceMessage: \"No translations to display\"\n          }\n        }}\n        options={{\n          search: true,\n          showTitle: true,\n          actionsColumnIndex: -1,\n          pageSize: tableData && tableData.length ? 10 : 5,\n          pageSizeOptions: [5, 10, 20, 50],\n          headerStyle: {\n            backgroundColor: colors.grey[50]\n          },\n          searchFieldStyle: {\n            height: \"3.9em\"\n          },\n          addRowPosition: \"first\"\n        }}\n      />\n    </div>\n  );\n};\n\nexport default TranslationsTable;\n","import React from 'react';\nimport { useRouter } from '../../hooks';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport { Tabs, Tab, Divider, colors } from '@material-ui/core';\n\nimport { Header, LanguagesTable, TranslationsTable } from '../../components';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    padding: theme.spacing(3)\n  },\n  tabs: {\n    marginTop: theme.spacing(3)\n  },\n  divider: {\n    backgroundColor: colors.grey[300]\n  },\n  content: {\n    marginTop: theme.spacing(3)\n  }\n}));\n\nconst Languages = () => {\n  const classes = useStyles();\n\n  const router = useRouter<{ tab: string }>();\n  const { match: { params: { tab } } } = router;\n\n  const handleTabsChange = (\n    event: React.ChangeEvent<{}>,\n    tab: string) => {\n    router.history.push(`/${tab}`);\n  };\n\n  const tabs = [\n    { value: 'overview', label: 'Overview' },\n    { value: 'translations', label: 'Translations' }\n  ];\n\n  return (\n    <div className={classes.root}>\n      <Header />\n      <Tabs\n        className={classes.tabs}\n        onChange={handleTabsChange}\n        scrollButtons=\"auto\"\n        value={tab}\n        variant=\"scrollable\"\n      >\n        {tabs.map(tab => (\n          <Tab\n            key={tab.value}\n            label={tab.label}\n            value={tab.value}\n          />\n        ))}\n      </Tabs>\n      <Divider className={classes.divider} />\n      <div className={classes.content}>\n        {tab === 'overview' && <LanguagesTable />}\n        {tab === 'translations' && <TranslationsTable />}\n      </div>\n    </div>\n  );\n};\n\nexport default Languages;\n","import { Link, Typography } from '@material-ui/core';\nimport Icon from '@material-ui/core/Icon';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport React from 'react';\n\ninterface Props {\n  className?: string;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      padding: theme.spacing(4),\n    },\n    icon: {\n      fontSize: '12px',\n      lineHeight: '17px'\n    }\n  }));\n\nconst Footer: React.FC<Props> = ({ className, ...rest }: Props) => {\n  const classes = useStyles();\n\n  return (\n    <div\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <Typography variant=\"body1\">\n        &copy;{' '}\n        <Link\n          component=\"a\"\n          href=\"http://oxidforge.org\"\n          target=\"_blank\"\n        >\n          Oxid eSales - Oxid Projects\n        </Link> 2019\n      </Typography>\n      <Typography variant=\"caption\">\n        Module Translations was <Icon className={classes.icon}>code</Icon> with <Icon className={classes.icon}>favorite</Icon> by\n        developers who <Icon className={classes.icon}>thumb_up</Icon> to work together with OXID!\n      </Typography>\n    </div>\n  );\n};\n\nexport default Footer;\n","import { Fab } from '@material-ui/core';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport AddIcon from '@material-ui/icons/Add';\nimport clsx from 'clsx';\nimport React, { useRef, useState } from 'react';\nimport { HashRouter, Redirect, Route, Switch } from 'react-router-dom';\nimport Languages from '../../views/Languages';\nimport Footer from './components/Footer';\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      paddingTop: 0,\n      height: '100%',\n      [theme.breakpoints.up('sm')]: {\n        paddingTop: 8\n      }\n    },\n    content: {\n      height: '100%'\n    },\n    fab: {\n      position: 'fixed',\n      bottom: 24,\n      right: 24,\n      zIndex: theme.zIndex.appBar + 2\n    },\n    menuItem: {\n      justifyContent: 'space-between'\n    },\n    openInNewIcon: {\n      marginLeft: theme.spacing(2)\n    }\n  }),\n);\n\nconst Main: React.FC = () => {\n  const classes = useStyles();\n\n  const fabRef = useRef(null);\n  const [open, setOpen] = useState(false);\n\n  const handleMenuOpen = () => {\n    setOpen(true);\n  };\n\n  return (\n    <div\n      className={clsx({\n        [classes.root]: true,\n      })}\n    >\n      <main className={classes.content}>\n        <HashRouter basename=\"/languages\">\n          <Fab\n            color=\"primary\"\n            aria-label=\"add\"\n            className={classes.fab}\n            onClick={handleMenuOpen}\n            ref={fabRef}\n          >\n            <AddIcon />\n          </Fab>\n          <Switch>\n            <Redirect\n              exact\n              from=\"/\"\n              to=\"/overview\"\n            />\n            <Route\n              component={Languages}\n              exact\n              path=\"/:tab\"\n            />\n            <Route\n              component={Languages}\n              exact\n              path=\"/:tab/:id\"\n            />\n          </Switch>\n          <Footer />\n        </HashRouter>\n      </main>\n    </div >\n  );\n};\n\nexport default Main;\n","import React from 'react';\nimport { ThemeProvider } from '@material-ui/styles';\nimport theme from './theme';\nimport 'react-perfect-scrollbar/dist/css/styles.css';\nimport './assets/scss/index.scss';\n\nimport Main from './layouts/Main';\n\nconst App: React.FC = () => {\n    return (\n        <ThemeProvider theme={theme}>\n            <Main />\n        </ThemeProvider>\n    );\n};\n\nexport default App;\n","import { ApolloProvider } from \"@apollo/react-hooks\";\nimport { ApolloClient } from \"apollo-client\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport React from \"react\";\nimport { ApolloProvider as ApolloHooksProvider } from \"react-apollo-hooks\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\ndeclare global {\n  interface Window {\n    token: any;\n  }\n}\n\nconst httpLink = createHttpLink({\n  uri: process.env.REACT_APP_GRAPHQL_ENDPOINT,\n  headers: { Authorization: `Bearer ${window.token}` }\n});\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: httpLink\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <ApolloHooksProvider client={client}>\n      <App />\n    </ApolloHooksProvider>\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}